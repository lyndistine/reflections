What happens when you initialize a repository? Why do you need to do it?

	An empty metadata file is created that gives you the ability to:
	* create commits
	* track commits

	You do it so the computer knows where and what files to include.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	It's different from the working directory in that it contains files meant to go in the repository.
	It's different from the repository because the files/changes aren't there *yet*.
	It lets you save your changes without adding them all at once.
	It lets you commit rational chunks.

How can you use the staging area to make sure you have on commit per logical change?

	By comparing it to both the most recent commit and the working directory.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches let you experiment without concern for the state of your main project.
	I could use this to write my new tests.

How do the diagrams help you visualize the branch structure?

	It helps you keep track of both where you are, and where you'll want to be heading eventually.
	It also helps avoid losing work to unreachable commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The result is a combined history of both branches.
	The diagram represents the different paths the code took to reach its final state.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

	Pros include that changes are always caught.
	Cons are that changes might not be a big deal.
